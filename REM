## Random Encounter Models (REMs) with Grumeti Data ## 

# set workspace 
rm(list=ls())
library(RandEM); library(Hmisc)

# load data 
dat <- read.csv("grumeti_prepped.csv")
effort <- read.csv("grumeti_effort.csv")
traits <- read.csv("Species_Traits.csv")
grumeti <- read.csv("grumeti_counts.csv")

# rem function using RandEM package 
remcalc <- function(data, effort, traits, species, period){  #period = "ALL" or "SOME"
  newdat <- NULL
  sub <- data[data$species == species,]
  sites <- NULL; sites$site <- unique(sub$site) 
  sites$NUM <- c(1:length(sites$site))
  sub <- merge(sub, sites, all.x=T)
  sub <- sub[c("NUM", "count")]
  sub$detdist <- 13.72 #camera sensor distance in m 
  sub$theta <- 0.49 #camera sensor distance in radians 
  
  # define tm (total number of hours all cameras were operational) and v (distance travelled by focal species in 24 hours in km) 
  tm <- ifelse(period=="ALL", nrow(effort)*24, nrow(effort)*12)
  v <- traits[traits$Common.name == capitalize(species),]$Daily.Movement..km.
  
  # rem function 
  nboots <- 10000 #number of bootstraps 
  remsD <- boot_sd(sub, nboots=nboots, tm=tm, v=v)
  remsSD <- sd(remsD)
  remsSE <- sd(remsD)/sqrt(nboots)
  
  #output
  newdat$species <- species
  newdat$boot.mean <- mean(remsD)
  newdat$boot.sd <- remsSD
  newdat$boot.se <- remsSE
  newdat$boot.upperCI <- mean(remsD) + 1.96*remsSE
  newdat$boot.lowerCI <- mean(remsD) - 1.96*remsSE
  
  newdat <- data.frame(newdat)
  return(newdat)
}

# rem function for weighted habitat data 
bsD.hab <- function(dat, effort, v, period){
  wooddat <- dat[dat$habitat == "woodlands",]
  wooddat$habitat <- NULL 
  woodsites <- length(unique(wooddat$site))
  woodeffort <- effort[effort$site %in% unique(wooddat$site),]
  tm <- ifelse(period=="ALL", nrow(woodeffort)*24, nrow(woodeffort)*12)
  wooddat$site <- NULL 
  wooddat$detdist <- 13.72 #camera sensor distance in m 
  wooddat$theta <- 0.49 #camera sensor distance in radians
  
  bsDatWood <- wooddat[sample(1:nrow(wooddat), size = nrow(wooddat), replace = TRUE),]
  dOutWood <- rem(bsDatWood, tm, v) 
  
  plaindat <- dat[dat$habitat == "plains",]
  plaindat$habitat <- NULL
  plainsites <- length(unique(plaindat$site))
  plaineffort <- effort[effort$site %in% unique(plaindat$site),]
  tm <- ifelse(period=="ALL", nrow(plaineffort)*24, nrow(plaineffort)*12)
  
  plaindat$site <- NULL 
  plaindat$detdist <- 13.72 #camera sensor distance in m 
  plaindat$theta <- 0.49 #camera sensor distance in radians 
  
  bsDatPlain <- plaindat[sample(1:nrow(plaindat), size = nrow(plaindat), replace = TRUE),]
  dOutPlain <- rem(bsDatPlain, tm, v)
  
  dOut <- (dOutWood*woodsites*5 + dOutPlain*plainsites*5)/((woodsites+plainsites) * 5)
  return(dOut)
}

# bootstrapping function for habitat data 
boot_sd.hab <- function (x, effort, v, nboots, period) {
  d <- replicate(nboots, bsD.hab(x, effort, v, period))
  return(d)
}

# overall function for habitat data 
remcalc.hab <- function(data, effort, traits, species, period){ 
  newdat <- NULL
  sub <- data[data$species == species,]
  sites <- NULL; sites$site <- unique(sub$site) 
  sites$NUM <- c(1:length(sites$site))
  sub <- merge(sub, sites, all.x=T)
  sub <- sub[c("NUM", "count", "habitat", "site")]
  v <- traits[traits$Common.name == capitalize(species),]$Daily.Movement..km.
  
  # rem function 
  nboots <- 10000 #number of bootstraps
  remsD <- boot_sd.hab(sub, nboots=nboots, effort=effort, v=v, period=period) 
  remsSD <- sd(remsD)
  remsSE <- sd(remsD)/sqrt(nboots)
  
  #output
  newdat$species <- species
  newdat$boot.mean <- mean(remsD)
  newdat$boot.sd <- remsSD
  newdat$boot.se <- remsSE
  newdat$boot.upperCI <- mean(remsD) + 1.96*remsSE
  newdat$boot.lowerCI <- mean(remsD) - 1.96*remsSE
  
  newdat <- data.frame(newdat)
  return(newdat)
} 


## species of interest 
species <- c("buffalo", "eland", "elephant", "giraffe", "impala", "warthog", "waterbuck")

## calculating REM 
finaldat <- NULL
for(i in 1:length(species)){
  a <- remcalc(dat, effort, traits, species[i], "ALL")
  a$subset <- "all"
  
  b <- remcalc(dat[dat$period == "day",], effort, traits, species[i], "SOME")
  b$subset <- "day"
  
  c <- remcalc(dat[dat$period == "night",], effort, traits, species[i], "SOME")
  c$subset <- "night"
  
  d <- remcalc(dat[dat$habitat == "woodlands",], effort, traits, species[i], "ALL")
  d$subset <- "woods"
  
  e <- remcalc(dat[dat$habitat == "plains",], effort, traits, species[i], "ALL")
  e$subset <- "plains"
  
  finaldat <- rbind(finaldat, a, b, c, d, e)
}

# calculating REM for habitat data 
habdat <- NULL
for(i in 1:length(species)){
  a <- remcalc.hab(dat, effort, traits, species[i], "ALL")
  a$subset <- "habitat/all"
  
  b <-  remcalc.hab(dat, effort, traits, species[i], "SOME") #NOTE: never end up using this 
  b$subset <- "habitat/day"
  
  habdat <- rbind(habdat, a, b)
}

# combine data 
finaldat <- rbind(finaldat, habdat)
finaldat <- finaldat[order(finaldat$species),]

# compare with Grumeti aerial counts 
finaldat <- merge(finaldat, grumeti, all.x=T)
finaldat$per.err <- ((finaldat$boot.mean-finaldat$density)/finaldat$density)*100
finaldat$CoV <- finaldat$boot.sd/finaldat$boot.mean


## reliability 
subset <- unique(finaldat$subset)
reldf <- NULL

for(i in 1:length(subset)) { 
  x <- summary(lm(log(finaldat[finaldat$subset==subset[i],]$boot.mean) ~ log(finaldat[finaldat$subset==subset[i],]$density)))
  reldf$subset[i] <- as.character(subset[i])
  reldf$slope[i] <- x$coefficients[2,1]
  reldf$stderr[i] <- x$coefficients[2,2]
  reldf$up.ci[i] <- x$coefficients[2,1] + 1.96*x$coefficients[2,2]
  reldf$lw.ci[i] <- x$coefficients[2,1] - 1.96*x$coefficients[2,2]
  reldf$pval[i] <- x$coefficients[2,4]
}
reldf <- data.frame(reldf)

## model relationship between percent error and species traits 
traits <- traits[c(1,3:6)]
names(traits)[1] <- "species"
traits$weight <- scale(traits$Weight..kg.)
traits$group <- scale(traits$Group.Size)
traits$move <- scale(traits$Daily.Movement..km.)
traits$home <- scale(traits$Home.Range.Size..km2.)
finaldat$species <- capitalize(as.character(finaldat$species))
finaldat <- merge(finaldat, traits, all.x=T)
finaldat$per.err <- abs(finaldat$per.err)

subset <- unique(finaldat$subset)
traitdf <- NULL

for(i in 1:length(subset)) { 
  x <- summary(lm(per.err ~ weight + group + move + home, dat = finaldat[finaldat$subset==subset[i],]))
  newdf <- NULL
  newdf$subset <- rep(as.character(subset[i]), 4)
  newdf$trait <- c("Weight", "Group Size", "Daily Movement", "Home Range Size")
  newdf$beta <- c(x$coefficients[2,1], x$coefficients[3,1], x$coefficients[4,1], x$coefficients[5,1]) 
  newdf$stderr <- c(x$coefficients[2,2], x$coefficients[3,2], x$coefficients[4,2], x$coefficients[5,2])
  newdf$uCI <- c(x$coefficients[2,1] + 1.96*x$coefficients[2,2], 
                 x$coefficients[3,1] + 1.96*x$coefficients[3,2], 
                 x$coefficients[4,1] + 1.96*x$coefficients[4,2], 
                 x$coefficients[5,1] + 1.96*x$coefficients[5,2])
  newdf$lCI <- c(x$coefficients[2,1] - 1.96*x$coefficients[2,2], 
                 x$coefficients[3,1] - 1.96*x$coefficients[3,2], 
                 x$coefficients[4,1] - 1.96*x$coefficients[4,2], 
                 x$coefficients[5,1] - 1.96*x$coefficients[5,2])
  newdf$pval <- c(x$coefficients[2,4], x$coefficients[3,4], x$coefficients[4,4], x$coefficients[5,4])
  newdf <- data.frame(newdf)
  traitdf <- rbind(traitdf, newdf)
}
