## Random Encounter Models (REMs) with Grumeti Data ## 

## prepare ## 

# set workspace 
rm(list=ls())
library(RandEM); library(Hmisc)

# load data 
dat <- read.csv("grumeti_prepped.csv")
effort <- read.csv("grumeti_effort.csv")
traits <- read.csv("Species_Traits.csv")
grumeti <- read.csv("grumeti_counts.csv")

# species of interest 
species <- c("buffalo", "eland", "elephant", "giraffe", "impala", "warthog", "waterbuck")

## functions ## 

# rem weighted habitat function 
rem_hab <- function(d, indices, tm_wood, tm_plains, v,woodsites, plainsites){
  dat <- d[indices,]
  dat_wood <- dat[dat$habitat == "woodlands",]; dat_plains <- dat[dat$habitat == "plains",]
  dat_wood$habitat <- NULL; dat_plains$habitat <- NULL
  
  # Calculate y: total captures
  y_wood <- sum(dat_wood[,2])
  y_plains <- sum(dat_plains[,2])
  
  # Concert tm to days 
  tm_wood_days <- tm_wood/24
  tm_plains_days <- tm_plains/24
  
  # Convert r to kilometres (same for both sites)
  r_kilometers <- mean(dat_wood[,3], na.rm = TRUE) / 1000
  
  # Take mean of angles (same for both sites) 
  theta <- mean(dat_wood[,4], na.rm = TRUE)
  
  # Calculate REMs for each habitat and weight overall REM  
  trm1_wood <- y_wood / tm_wood_days
  trm1_plain <- y_plains / tm_plains_days
  trm2 <- pi / (v * r_kilometers * (2 + theta))
  
  REM_wood <- trm1_wood * trm2; REM_plains <- trm1_plain * trm2
  REM_total <- ((REM_wood*length(woodsites)) + (REM_plains*length(plainsites)))/(length(woodsites) + length(plainsites))
  
  # Return overall REM 
  return(REM_total)
}

# rem weighted habitat bootstrapping using RandEM package 
remcalc_hab <- function(data, effort, traits, species, period){  #period = "ALL" or "SOME"
  newdat <- NULL
  woodsites <- unique(data[data$habitat == "woodlands",]$site) #OVERALL sites, not just where animal spotted 
  plainsites <- unique(data[data$habitat == "plains",]$site) #OVERALL sites, not just where animal spotted 
  sub <- data[data$species == species,]
  sites <- NULL; sites$site <- unique(sub$site) 
  sites$NUM <- c(1:length(sites$site))
  sub <- merge(sub, sites, all.x=T)
  sub <- sub[c("NUM", "count", "habitat")]
  sub$detdist <- 13.72 #CUDDEBACK sensor distance in m ##14.42 #sensor distance (m)
  sub$theta <- 0.49 #CUDDEBACK sensor distance in radians ##0.87475902 #camera angle (radians) 
  v <- traits[traits$Common.name == capitalize(species),]$Daily.Movement..km.
  
  effort_wood <- effort[effort$site %in% woodsites,]
  tm_wood <- ifelse(period=="ALL", nrow(effort_wood)*24, nrow(effort_wood)*12)
  effort_plains <- effort[effort$site %in% plainsites,]
  tm_plains <- ifelse(period=="ALL", nrow(effort_plains)*24, nrow(effort_plains)*12)
  
  nboots <- 10000
  rem.boot <- boot(sub, 
                   tm_wood=tm_wood, tm_plains=tm_plains, v=v, woodsites=woodsites, plainsites=plainsites,
                   R = nboots, statistic = rem_hab)
  rem.ci <- boot.ci(rem.boot, conf=0.95, type="perc")
  
  #output
  newdat$species <- species
  newdat$boot.mean <- mean(rem.boot$t)
  newdat$boot.uCI <- rem.ci$percent[5]
  newdat$boot.lCI <- rem.ci$percent[4]
  newdat$boot.sd <- sd(rem.boot$t)
  
  newdat <- data.frame(newdat)
  return(newdat)
}

# rem function (w/o habitat)
rem2 <- function(d, indices, tm, v){
  dat <- d[indices,]
    
  # Calculate y: total captures
  y <- sum(dat[,2])
    
  # Convert to detection distance to kilometres and effort to days
  tm_days <- tm / 24
  r_kilometers <- mean(dat[,3], na.rm = TRUE) / 1000
    
  # Take mean of angles
  theta <- mean(dat[,4], na.rm = TRUE)
    
  # Calculate the first half of the equation
  trm1 <- y / tm_days
  trm2 <- pi / (v * r_kilometers * (2 + theta))
    
  # Calculate REM
  return(trm1 * trm2)
}

# rem w/o habitat bootstrapping using RandEM package 
remcalc_all <- function(data, effort, traits, species, period){  #period = "ALL" or "SOME"
  newdat <- NULL
  sub <- data[data$species == species,]
  sites <- NULL; sites$site <- unique(sub$site) 
  sites$NUM <- c(1:length(sites$site))
  sub <- merge(sub, sites, all.x=T)
  sub <- sub[c("NUM", "count")]
  sub$detdist <- 13.72 #sensor distance in m ##14.42 #sensor distance (m)
  sub$theta <- 0.49 #sensor distance in radians 
  
  # tm (total hrs all cameras were operational) and v (distance travelled by focal species in 24 hours in km) 
  tm <- ifelse(period=="ALL", nrow(effort)*24, nrow(effort)*12)
  v <- traits[traits$Common.name == capitalize(species),]$Daily.Movement..km.
  
  nboots <- 10000
  rem.boot <- boot(sub, tm = tm, v = v, R = nboots, statistic = rem2)
  rem.ci <- boot.ci(rem.boot, conf=0.95, type="perc")
  
  #output
  newdat$species <- species
  newdat$boot.mean <- mean(rem.boot$t)
  newdat$boot.uCI <- rem.ci$percent[5]
  newdat$boot.lCI <- rem.ci$percent[4]
  newdat$boot.sd <- sd(rem.boot$t)
  
  newdat <- data.frame(newdat)
  return(newdat)
}

## bootstrapping ## 

# calculating weighted habitat REM 
finaldat <- NULL
for(i in 1:length(species)){
  a <- remcalc_hab(dat, effort, traits, species[i], "ALL")
  a$subset <- "all_wHab"
  
  b <- remcalc_hab(dat[dat$period == "day",], effort, traits, species[i], "SOME")
  b$subset <- "day_wHab"
  
  c <- remcalc_hab(dat[dat$period == "night",], effort, traits, species[i], "SOME")
  c$subset <- "night_wHab"
  
  finaldat <- rbind(finaldat, a, b, c)
}
habdat <- finaldat; rm(finaldat) 

# calculating REM w/o habitat 
finaldat <- NULL
for(i in 1:length(species)){
  a <- remcalc(dat, effort, traits, species[i], "ALL")
  a$subset <- "all"
  
  b <- remcalc(dat[dat$period == "day",], effort, traits, species[i], "SOME")
  b$subset <- "day"
  
  c <- remcalc(dat[dat$period == "night",], effort, traits, species[i], "SOME")
  c$subset <- "night"
  
  finaldat <- rbind(finaldat, a, b, c)
}

finaldat <- rbind(finaldat, habdat)
finaldat <- finaldat[order(finaldat$species),]

## analyses and comparisons ## 

# compare with Grumeti
finaldat <- merge(finaldat, grumeti, all.x=T)
finaldat$per.err <- ((finaldat$boot.mean-finaldat$density)/finaldat$density)*100
finaldat$CoV <- finaldat$boot.sd/finaldat$boot.mean

# reliability 
subset <- unique(finaldat$subset)
reldf <- NULL

for(i in 1:length(subset)) { 
  x <- summary(lm(log(finaldat[finaldat$subset==subset[i],]$boot.mean) ~ log(finaldat[finaldat$subset==subset[i],]$density)))
  reldf$subset[i] <- as.character(subset[i])
  reldf$slope[i] <- x$coefficients[2,1]
  reldf$stderr[i] <- x$coefficients[2,2]
  reldf$up.ci[i] <- x$coefficients[2,1] + 1.96*x$coefficients[2,2]
  reldf$lw.ci[i] <- x$coefficients[2,1] - 1.96*x$coefficients[2,2]
  reldf$pval[i] <- x$coefficients[2,4]
}
reldf <- data.frame(reldf)

# model relationship between percent error and species traits 
traits <- traits[c(1,3:6)]
names(traits)[1] <- "species"
traits$weight <- scale(traits$Weight..kg.)
traits$group <- scale(traits$Group.Size)
traits$move <- scale(traits$Daily.Movement..km.)
traits$home <- scale(traits$Home.Range.Size..km2.)
finaldat$species <- capitalize(as.character(finaldat$species))
finaldat <- merge(finaldat, traits, all.x=T)
finaldat$per.err <- abs(finaldat$per.err)

subset <- unique(finaldat$subset)
traitdf <- NULL

for(i in 1:length(subset)) { 
  x <- summary(lm(per.err ~ weight + group + move + home, dat = finaldat[finaldat$subset==subset[i],]))
  newdf <- NULL
  newdf$subset <- rep(as.character(subset[i]), 4)
  newdf$trait <- c("Weight", "Group Size", "Daily Movement", "Home Range Size")
  newdf$beta <- c(x$coefficients[2,1], x$coefficients[3,1], x$coefficients[4,1], x$coefficients[5,1]) 
  newdf$stderr <- c(x$coefficients[2,2], x$coefficients[3,2], x$coefficients[4,2], x$coefficients[5,2])
  newdf$uCI <- c(x$coefficients[2,1] + 1.96*x$coefficients[2,2], 
                 x$coefficients[3,1] + 1.96*x$coefficients[3,2], 
                 x$coefficients[4,1] + 1.96*x$coefficients[4,2], 
                 x$coefficients[5,1] + 1.96*x$coefficients[5,2])
  newdf$lCI <- c(x$coefficients[2,1] - 1.96*x$coefficients[2,2], 
                 x$coefficients[3,1] - 1.96*x$coefficients[3,2], 
                 x$coefficients[4,1] - 1.96*x$coefficients[4,2], 
                 x$coefficients[5,1] - 1.96*x$coefficients[5,2])
  newdf$pval <- c(x$coefficients[2,4], x$coefficients[3,4], x$coefficients[4,4], x$coefficients[5,4])
  newdf <- data.frame(newdf)
  traitdf <- rbind(traitdf, newdf)
}
